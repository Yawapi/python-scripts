# Hierarchical clustering

# Clustering with NumPy array Normalizer() is different than StandardScaler(). 
# StandardScaler() standardizes features by removing the mean and scaling to unit variance. 
# Normalizer() rescales each sample independently of the other.

# Import Normalizer
from sklearn.preprocessing import Normalizer

# Create a normalizer: normalizer
normalizer = Normalizer()

# Hierarchical clustering with SciPy linkage() function on an array of samples. 
# Use the linkage() to obtain hierarchical clustering, then a dendrogram() to visualize results. 

# Import
from scipy.cluster.hierarchy import linkage, dendrogram
import matplotlib.pyplot as plt

# Calculate the linkage: mergings
mergings = linkage(samples, method='complete')

# Plot the dendrogram, using varieties as labels
dendrogram(mergings,
           labels=varieties,
           leaf_rotation=90,
           leaf_font_size=6,
)
plt.show()

# SciPy hierarchical clustering doesn't fit into a sklearn pipeline, so use normalize() from sklearn.preprocessing instead.

# Import normalize
from sklearn.preprocessing import normalize

# Normalize the movements: normalized_movements
normalized_movements = normalize(movements)

# Calculate the linkage: mergings
mergings = linkage(normalized_movements, method='complete')

# Plot the dendrogram
dendrogram(mergings,
           labels=companies,
           leaf_rotation=90,
           leaf_font_size=6,
)
plt.show()

# Perform hierarchical clustering with 'single' linkage, and compare results with a dendrogram. 
# Different linkage produces different hierarchical clustering.


# Import
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import linkage, dendrogram

# Calculate the linkage: mergings
mergings = linkage(samples, method='single')

# Plot the dendrogram
dendrogram(mergings,
           labels=country_names,
           leaf_rotation=90,
           leaf_font_size=6,
)

plt.show()

# Use fcluster() to extract cluster labels, compare labels with the using cross-tabulation.

# Import
import pandas as pd
from scipy.cluster.hierarchy import fcluster

# Use fcluster to extract labels: labels
labels = fcluster(mergings, 6, criterion='distance')

# Create a DataFrame with labels and varieties as columns: df
df = pd.DataFrame({'labels': labels, 'varieties': varieties})

# Create crosstab: ct
ct = pd.crosstab(df['labels'], df['varieties'])

# Display ct
print(ct)


